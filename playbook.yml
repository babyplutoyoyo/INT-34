- name: Config Debian 10 server, install PostgreSQL 16
  hosts: debian_servers
  become: yes
  vars_files:
    - vars/main.yml

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install basic packages
      apt:
        name: "{{ basic_packages }}"
        state: present

    - name: Add new Debian users
      user:
        name: "{{ item.username }}"
        password: "{{ item.password | password_hash('sha512') }}"
        state: present
        shell: /bin/bash
      loop: "{{ debian_users }}"


    - name: Install necessary packages for PostgreSQL
      apt:
        name: 
          - gnupg
          - lsb-release
          - wget
        state: present


    - name: Download PostgreSQL GPG key
      get_url:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        dest: /tmp/ACCC4CF8.asc

    - name: Add PostgreSQL GPG key to the trusted list
      command: gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg /tmp/ACCC4CF8.asc
      args:
        creates: /etc/apt/trusted.gpg.d/postgresql.gpg

    - name: Add PostgreSQL repository
      command: sh -c 'echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
      args:
        creates: /etc/apt/sources.list.d/pgdg.list

    - name: Update the package list
      apt:
        update_cache: yes

    - name: Install PostgreSQL 16
      apt:
        name: postgresql-16
        state: present

    - name: Start and enable PostgreSQL service
      systemd:
        name: postgresql@16-main.service
        enabled: yes
        state: started

    - name: Install psycopg2 for PostgreSQL connection
      apt:
        name: python3-psycopg2
        state: present


    - name: Create PostgreSQL database
      postgresql_db:
        name: "{{ database_name }}"
        state: present
      become_user: postgres

    - name: Add new PostgreSQL users
      postgresql_user:
        name: "{{ item.username }}"
        password: "{{ item.password }}"
        db: "{{ database_name }}"
        role_attr_flags: "CREATEDB"
        state: present
      loop: "{{ postgres_users }}"
      become_user: postgres


    - name: Create backup script
      copy:
        content: |
          #!/bin/bash
          BACKUP_DIR={{ backup_directory }}
          DB_NAME={{ database_name }}
          DATE=$(date +"\%Y-\%m-\%d_\%H-\%M-\%S")
          BACKUP_FILE="\${BACKUP_DIR}/\${DB_NAME}_\${DATE}.sql.gz"
          su - postgres -c "pg_dump \${DB_NAME} | gzip > \${BACKUP_FILE}"
        dest: /usr/local/bin/pg_backup.sh
        owner: root
        group: root
        mode: '0755'

    - name: Schedule daily backup using cron
      cron:
        name: "Daily PostgreSQL backup"
        job: "/usr/local/bin/pg_backup.sh"
        minute: 0
        hour: 2
